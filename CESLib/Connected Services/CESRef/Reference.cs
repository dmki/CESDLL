//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CESLib.CESRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currency", Namespace="http://schemas.datacontract.org/2004/07/CESWS")]
    [System.SerializableAttribute()]
    public partial class Currency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://mondor.org/", ConfigurationName="CESRef.iRates")]
    public interface iRates {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetCurrencyList", ReplyAction="http://mondor.org/iRates/GetCurrencyListResponse")]
        CESLib.CESRef.Currency[] GetCurrencyList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetCurrencyList", ReplyAction="http://mondor.org/iRates/GetCurrencyListResponse")]
        System.Threading.Tasks.Task<CESLib.CESRef.Currency[]> GetCurrencyListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetCurrencyCodes", ReplyAction="http://mondor.org/iRates/GetCurrencyCodesResponse")]
        string[] GetCurrencyCodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetCurrencyCodes", ReplyAction="http://mondor.org/iRates/GetCurrencyCodesResponse")]
        System.Threading.Tasks.Task<string[]> GetCurrencyCodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/Convert", ReplyAction="http://mondor.org/iRates/ConvertResponse")]
        double Convert(string CurrencyFrom, string CurrencyTo, double ValueFrom, string UserKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/Convert", ReplyAction="http://mondor.org/iRates/ConvertResponse")]
        System.Threading.Tasks.Task<double> ConvertAsync(string CurrencyFrom, string CurrencyTo, double ValueFrom, string UserKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/CheckBalance", ReplyAction="http://mondor.org/iRates/CheckBalanceResponse")]
        int CheckBalance(string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/CheckBalance", ReplyAction="http://mondor.org/iRates/CheckBalanceResponse")]
        System.Threading.Tasks.Task<int> CheckBalanceAsync(string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/CheckExpirationDate", ReplyAction="http://mondor.org/iRates/CheckExpirationDateResponse")]
        System.DateTime CheckExpirationDate(string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/CheckExpirationDate", ReplyAction="http://mondor.org/iRates/CheckExpirationDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> CheckExpirationDateAsync(string AccessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/UpgradeAccessCode", ReplyAction="http://mondor.org/iRates/UpgradeAccessCodeResponse")]
        bool UpgradeAccessCode(string OriginalCode, string UpgradeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/UpgradeAccessCode", ReplyAction="http://mondor.org/iRates/UpgradeAccessCodeResponse")]
        System.Threading.Tasks.Task<bool> UpgradeAccessCodeAsync(string OriginalCode, string UpgradeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/ConvertByDate", ReplyAction="http://mondor.org/iRates/ConvertByDateResponse")]
        double ConvertByDate(string CurrencyFrom, string CurrencyTo, System.DateTime DateOfRate, double ValueFrom, string UserKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/ConvertByDate", ReplyAction="http://mondor.org/iRates/ConvertByDateResponse")]
        System.Threading.Tasks.Task<double> ConvertByDateAsync(string CurrencyFrom, string CurrencyTo, System.DateTime DateOfRate, double ValueFrom, string UserKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetMinimalDate", ReplyAction="http://mondor.org/iRates/GetMinimalDateResponse")]
        System.DateTime GetMinimalDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetMinimalDate", ReplyAction="http://mondor.org/iRates/GetMinimalDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetMinimalDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetRatesMatrix", ReplyAction="http://mondor.org/iRates/GetRatesMatrixResponse")]
        string GetRatesMatrix(string AccessCode, string Currencies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetRatesMatrix", ReplyAction="http://mondor.org/iRates/GetRatesMatrixResponse")]
        System.Threading.Tasks.Task<string> GetRatesMatrixAsync(string AccessCode, string Currencies);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetCurrencyListCSV", ReplyAction="http://mondor.org/iRates/GetCurrencyListCSVResponse")]
        byte[] GetCurrencyListCSV();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetCurrencyListCSV", ReplyAction="http://mondor.org/iRates/GetCurrencyListCSVResponse")]
        System.Threading.Tasks.Task<byte[]> GetCurrencyListCSVAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetRetrospective", ReplyAction="http://mondor.org/iRates/GetRetrospectiveResponse")]
        byte[] GetRetrospective(string AccessCode, string CurrencyFrom, string CurrenciesTo, int days);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://mondor.org/iRates/GetRetrospective", ReplyAction="http://mondor.org/iRates/GetRetrospectiveResponse")]
        System.Threading.Tasks.Task<byte[]> GetRetrospectiveAsync(string AccessCode, string CurrencyFrom, string CurrenciesTo, int days);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface iRatesChannel : CESLib.CESRef.iRates, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iRatesClient : System.ServiceModel.ClientBase<CESLib.CESRef.iRates>, CESLib.CESRef.iRates {
        
        public iRatesClient() {
        }
        
        public iRatesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public iRatesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iRatesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iRatesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CESLib.CESRef.Currency[] GetCurrencyList() {
            return base.Channel.GetCurrencyList();
        }
        
        public System.Threading.Tasks.Task<CESLib.CESRef.Currency[]> GetCurrencyListAsync() {
            return base.Channel.GetCurrencyListAsync();
        }
        
        public string[] GetCurrencyCodes() {
            return base.Channel.GetCurrencyCodes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCurrencyCodesAsync() {
            return base.Channel.GetCurrencyCodesAsync();
        }
        
        public double Convert(string CurrencyFrom, string CurrencyTo, double ValueFrom, string UserKey) {
            return base.Channel.Convert(CurrencyFrom, CurrencyTo, ValueFrom, UserKey);
        }
        
        public System.Threading.Tasks.Task<double> ConvertAsync(string CurrencyFrom, string CurrencyTo, double ValueFrom, string UserKey) {
            return base.Channel.ConvertAsync(CurrencyFrom, CurrencyTo, ValueFrom, UserKey);
        }
        
        public int CheckBalance(string AccessCode) {
            return base.Channel.CheckBalance(AccessCode);
        }
        
        public System.Threading.Tasks.Task<int> CheckBalanceAsync(string AccessCode) {
            return base.Channel.CheckBalanceAsync(AccessCode);
        }
        
        public System.DateTime CheckExpirationDate(string AccessCode) {
            return base.Channel.CheckExpirationDate(AccessCode);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> CheckExpirationDateAsync(string AccessCode) {
            return base.Channel.CheckExpirationDateAsync(AccessCode);
        }
        
        public bool UpgradeAccessCode(string OriginalCode, string UpgradeCode) {
            return base.Channel.UpgradeAccessCode(OriginalCode, UpgradeCode);
        }
        
        public System.Threading.Tasks.Task<bool> UpgradeAccessCodeAsync(string OriginalCode, string UpgradeCode) {
            return base.Channel.UpgradeAccessCodeAsync(OriginalCode, UpgradeCode);
        }
        
        public double ConvertByDate(string CurrencyFrom, string CurrencyTo, System.DateTime DateOfRate, double ValueFrom, string UserKey) {
            return base.Channel.ConvertByDate(CurrencyFrom, CurrencyTo, DateOfRate, ValueFrom, UserKey);
        }
        
        public System.Threading.Tasks.Task<double> ConvertByDateAsync(string CurrencyFrom, string CurrencyTo, System.DateTime DateOfRate, double ValueFrom, string UserKey) {
            return base.Channel.ConvertByDateAsync(CurrencyFrom, CurrencyTo, DateOfRate, ValueFrom, UserKey);
        }
        
        public System.DateTime GetMinimalDate() {
            return base.Channel.GetMinimalDate();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetMinimalDateAsync() {
            return base.Channel.GetMinimalDateAsync();
        }
        
        public string GetRatesMatrix(string AccessCode, string Currencies) {
            return base.Channel.GetRatesMatrix(AccessCode, Currencies);
        }
        
        public System.Threading.Tasks.Task<string> GetRatesMatrixAsync(string AccessCode, string Currencies) {
            return base.Channel.GetRatesMatrixAsync(AccessCode, Currencies);
        }
        
        public byte[] GetCurrencyListCSV() {
            return base.Channel.GetCurrencyListCSV();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetCurrencyListCSVAsync() {
            return base.Channel.GetCurrencyListCSVAsync();
        }
        
        public byte[] GetRetrospective(string AccessCode, string CurrencyFrom, string CurrenciesTo, int days) {
            return base.Channel.GetRetrospective(AccessCode, CurrencyFrom, CurrenciesTo, days);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetRetrospectiveAsync(string AccessCode, string CurrencyFrom, string CurrenciesTo, int days) {
            return base.Channel.GetRetrospectiveAsync(AccessCode, CurrencyFrom, CurrenciesTo, days);
        }
    }
}
